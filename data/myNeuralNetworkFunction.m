function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 19-May-2016 08:28:28.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 10xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [280.355631797177;683.381027197755;2314.6916241515;1260.07554178634;1617.40542175536;1801.56407683873;2169.88982589195;2362.52006814102;1086.48553715909;2858.22131487138];
x1_step1.gain = [8.6546798593363e-06;5.79366383814708e-06;4.63946771157e-06;4.25849333843633e-06;3.82618753670513e-06;3.72458556901388e-06;3.56906379578554e-06;2.91541108715209e-06;2.33232001071112e-06;1.78835766434042e-06];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.4041346601978084152;-1.6463568443233469463;-0.050576924270036682785;1.8893485227862909515;-2.2952063009158631957;2.270806774277120077;-2.0044078443824151492;3.3439687804060187482;-0.95871922582912783017;1.6101625777462844624];
IW1_1 = [-0.32114662914225311496 -0.40648014954253486319 0.64675631848324532935 -0.43573194801514891772 -1.1441569325564100446 0.48724310365501605213 -0.59305763542862388604 0.84362819888321161077 0.68058396396872256062 0.69061094575350956415;0.49596922520170078075 -0.43272415960730792328 -0.37569198471967107933 -0.66533637632388376026 -0.12324265200122584696 -0.59980647138765630366 1.0051873596335578753 0.57784639126040704404 -0.31247789058799901873 0.64377304664986345628;-0.5923343825334698165 -1.2396837458440381763 0.041431223964445318408 -1.0185112402119365083 -1.1791901692855226713 -0.3096393144637420991 -1.1973196970285329144 0.24751753517874450217 0.5388450599116224593 0.050158360256147754841;-1.1515723332199114815 -0.69422760840549768702 -0.29449516331472097574 0.023525220100966113407 -0.14496165222243090343 0.77449411782621890854 -0.34439116599536512275 -0.16984304017154452926 0.18536601389138232521 1.0427056547653981156;0.50543112405577461654 -0.70537406145609438113 0.17777729804661254742 0.82422520466387205751 -0.59251203847964672988 -0.91211823524628921067 -0.38911002114227372095 0.25906290119475472444 0.89461997855145514169 3.2367755419852364263;-0.6590482364432417306 0.28789646776162658437 -0.7671773114203964683 0.79500247367329102133 0.13729529312074009728 -0.30621524102879688067 1.4458262811405264703 1.4237867583679282291 1.7695646972788086071 0.51756429222491462383;0.68636092871879250676 -0.040067564221630908028 -0.10026968792771427663 1.4787727102588141825 -1.1192974835350690821 0.39747364426454634412 -0.33787056449842095551 0.11449919086859088047 0.40076147287652819085 3.6688560778045684607;0.97911412014805032644 -0.11587068884602480523 0.49422129824787797148 -0.56140431740104757008 0.32527074310980935712 0.73851369439407132944 0.66142321701784700938 -0.14048896029486479531 -1.2462525405200963746 -3.5469613046009924595;1.51534092692286948 0.082304548438956653955 1.3998117461228223313 0.10208848253050127608 -1.2110469333316848939 -0.28053815651226610139 -0.56528058135750669511 -1.5933115678541609483 -1.5638788059364643335 -0.81171814249918972095;-0.029682738218223755217 0.75211869161560429564 -0.08936390428795036589 0.40602756216628627106 -0.6921490478150847947 0.71233225608803141249 -0.95682403056616582848 -0.31025189621253995709 -0.50202491650355929309 0.10867551874829280145];

% Layer 2
b2 = [0.1315755826862004263;0.042306285670665563781;-0.5468918899015299262];
LW2_1 = [1.3663632659796389746 0.25154161606461694634 0.90589936888421696004 0.29197046096827694583 2.3497149326997113228 -0.066957403685259819781 4.593044959765045121 -4.1338180202683236786 -2.1499361160457577391 -0.82499227234726368874;-0.080794584264669080942 -0.60388536778197265953 -2.1829137691737310334 0.24219678945197675723 -3.2676466867964975016 4.0892748714630560158 -2.3652845419781649561 3.3874195499230164152 -2.4097446760186684855 -1.1277764185986736134;0.059772232645888628833 -0.81892682733418054042 0.078730201870485821969 0.32320783468064911981 -0.66784544502913245623 -4.2950021583823954074 -2.9975124843528284657 1.7007194336297561943 4.1439406994821998964 0.64309770571370228343];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
